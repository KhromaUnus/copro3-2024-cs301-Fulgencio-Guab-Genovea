namespace qwertyBalls{ //qwerty stands for "idk what to name this yet" and Balls stands for "bruh"
    public class Program{
        public static void Main(string[] args){
            bool willToLive = true;

            //Main Menu
            while(willToLive){
                Console.Clear();
                Console.WriteLine("===== MLG Samson Balls: Origins =====");
                Console.WriteLine("[1] New Game");
                Console.WriteLine("[2] Load Game");
                Console.WriteLine("[3] Campaign Mode");
                Console.WriteLine("[4] Credits");
                Console.WriteLine("[5] Exit\n");
                Console.Write("Select an option: ");

                switch(Console.ReadLine()){
                    case "1":
                        StartNewGame();
                        break;
                    case "2":
                        LoadGame();
                        break;
                    case "3":
                        CampaignMode();
                        break;
                    case "4":
                        ShowCredits();
                        break;
                    case "5":
                        willToLive = false;
                        Console.WriteLine("\nGoodbye!");
                        break;
                    default:
                        Console.WriteLine("\nInvalid option. Please try again.");
                        break;
                }

                if(willToLive){
                    Console.Write("\nPress any key to return to the menu...");
                    Console.ReadKey();
                }
            }
        }

        static void StartNewGame(){
            NewGame NuGame = new CharacterCreation();
            NuGame.CharacterCustomization();
        }

        static void LoadGame(){
            LoadGame LudDaGame = new LoadGame();
            LudDaGame.ShowLoadGameMenu();
        }

        static void CampaignMode(){
            CampaignMode ToweeMODE = new CampaignMode();
            ToweeMODE.StorySummary();
        }

        static void ShowCredits(){
            Console.Clear();
            Console.WriteLine("===== Credits =====");
            Console.WriteLine("Developed by \"MaNa Gang\" Game Studios:");
            Console.WriteLine("Fulgenco, Charle Dizon");
            Console.WriteLine("Guab, Lance Karyll Lumba");
            Console.WriteLine("Genovea, Aira Mae Baldismo");
        }
    }
}

using MySql.Data.MySqlClient;

//Honestly stolen but who dafuq cares as long as it works
public class DatabaseHelper
{
    private const string connectionString = "Server=localhost;Database=qwertyballsdb;Uid=root;Pwd=CdF@337166;";

    public static MySqlConnection GetConnection()
    {
        try
        {
            var connection = new MySqlConnection(connectionString);
            connection.Open();
            return connection;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error connecting to the database: " + ex.Message);
            throw;
        }
    }

    public static int ExecuteQuery(string query)
    {
        try
        {
            using (var connection = GetConnection())
            {
                var command = new MySqlCommand(query, connection);
                return command.ExecuteNonQuery();
            }
        }
        catch (MySqlException ex)
        {
            Console.WriteLine($"Database Error: {ex.Message}");
            return -1;
        }
    }

    public static object ExecuteScalarQuery(string query)
    {
        object result = null;

        try
        {
            using (MySqlConnection connection = new MySqlConnection(connectionString))
            {
                connection.Open();

                using (MySqlCommand command = new MySqlCommand(query, connection))
                {
                    result = command.ExecuteScalar();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error executing scalar query: {ex.Message}");
        }

        return result;
    }

    public static MySqlDataReader ExecuteReader(string query)
    {
        try
        {
            var connection = GetConnection();
            var command = new MySqlCommand(query, connection);
            return command.ExecuteReader(System.Data.CommandBehavior.CloseConnection);
        }
        catch (MySqlException ex)
        {
            Console.WriteLine("Database Error: " + ex.Message);
            throw;
        }
    }

    public static bool IsCharacterNameTaken(string characterName)
    {
        string query = "SELECT COUNT(*) FROM characters WHERE character_name = @characterName";
        using (var connection = GetConnection())
        {
            var command = new MySqlCommand(query, connection);
            command.Parameters.AddWithValue("@characterName", characterName);

            int count = Convert.ToInt32(command.ExecuteScalar());
            return count > 0;
        }
    }

    public static string EscapeApostrophes(string input)
    {
        return input.Replace("'", "''");
    }

    public static void UpdateFacePaintStatus(int characterId, bool facePaint)
    {
        string query = "UPDATE characters SET face_paint = @facePaint WHERE id = @characterId";
        using (var connection = GetConnection())
        {
            var command = new MySqlCommand(query, connection);
            command.Parameters.AddWithValue("@facePaint", facePaint ? 1 : 0);
            command.Parameters.AddWithValue("@characterId", characterId);

            command.ExecuteNonQuery();
        }
    }
}

/* Am so f'ing proud of this, kills 3 bird with 1 stone but on GAWD why dafuq does it have 21 WARNINGS!
/ WHY ARE YOU THE WAY YOU ARE!!!! */
public abstract class BaseCharacter{
    private string name;
    private string gender;
    private string age;
    private string bodyType;
    private string height;
    private string skinColor;
    private string hairType;
    private string hairColor;
    private string eyeColor;
    private string headgear;
    private string top;
    private string pants;
    private string shoes;
    private string accessories;
    private bool facePaint;
    private string bat;
    private string gloves;
    private string physicalClass;
    private string mentalClass;
    private string specialTrait;
    private string teamName;
    private int jerseyNumber;

    /*  Getters & Setters   */
    protected string Name{ get{ return this.name; } set{ this.name = value; }}
    protected string Gender{ get{ return this.gender; } set{ this.gender = value; }}
    protected string Age{ get{ return this.age; } set{ this.age = value; }}
    protected string BodyType{ get{ return this.bodyType; } set{ this.bodyType = value; }}
    protected string Height{ get{ return this.height; } set{ this.height = value; }}
    protected string SkinColor{ get{ return this.skinColor; } set{ this.skinColor = value; }}
    protected string HairType{ get{ return this.hairType; } set{ this.hairType = value; }}
    protected string HairColor{ get{ return this.hairColor; } set{ this.hairColor = value; }}
    protected string EyeColor{ get{ return this.eyeColor; } set { this.eyeColor = value; }}
    protected string Headgear{ get{ return this.headgear; } set{ this.headgear = value; }}
    protected string Top{ get{ return this.top; } set{ this.top = value; }}
    protected string Pants{ get{ return this.pants; } set{ this.pants = value; }}
    protected string Shoes{ get{ return this.shoes; } set{ this.shoes = value; }}
    protected string Accessories{ get{ return this.accessories; } set{ this.accessories = value; }}
    protected bool FacePaint{ get{ return this.facePaint; } set{ this.facePaint = value; }}
    protected string Bat{ get{ return this.bat; } set{ this.bat = value; }}
    protected string Gloves{ get{ return this.gloves; } set{ this.gloves = value; }}
    protected string PhysicalClass{ get{ return this.physicalClass; } set{ this.physicalClass = value; }}
    protected string MentalClass{ get{ return this.mentalClass; } set{ this.mentalClass = value; }}
    protected string SpecialTrait{ get{ return this.specialTrait; } set{ this.specialTrait = value; }}
    protected string TeamName{ get{ return this.teamName; } set{ this.teamName = value; }}
    protected int JerseyNumber{ get{ return this.jerseyNumber; } set{ this.jerseyNumber = value; }}

    public abstract void CharacterCustomization();

    public virtual void ShowcaseCharacterInfo(){
        Console.Clear();
        Console.WriteLine("===== Character =====");
        Console.WriteLine($"Name: {name}");
        Console.WriteLine($"Gender: {gender}");
        Console.WriteLine($"Age: {age}");
        Console.WriteLine($"Body Type: {bodyType}");
        Console.WriteLine($"Height: {height}");
        Console.WriteLine($"Skin Color: {skinColor}");
        Console.WriteLine($"Hair Type: {hairType}");
        Console.WriteLine($"Hair Color: {hairColor}");
        Console.WriteLine($"Eye Color: {eyeColor}");
        Console.WriteLine($"Headgear: {headgear}");
        Console.WriteLine($"Top: {top}");
        Console.WriteLine($"Pants: {pants}");
        Console.WriteLine($"Shoes: {shoes}");
        Console.WriteLine($"Accessories: {accessories}");
        Console.WriteLine($"Has Face Paint: {facePaint}");
        Console.WriteLine($"Baseball Bat: {bat}");
        Console.WriteLine($"Pitching Gloves: {gloves}");
        Console.WriteLine($"Physical Class: {physicalClass}");
        Console.WriteLine($"Mental Class: {mentalClass}");
        Console.WriteLine($"Special Trait: {specialTrait}");
        Console.WriteLine($"Team Name: {teamName}");
        Console.WriteLine($"Jersey Number: {jerseyNumber}");
    }
}

//An interface... because why not? It's in the requirements but I couldn't find a genuine use for it so this'll have to do :P
public interface NewGame{
    void CharacterCustomization();
    void ShowcaseCharacterInfo();
}

using System.Text.RegularExpressions;

class CharacterCreation : BaseCharacter, NewGame{
    public override void CharacterCustomization(){
        Console.Clear();
        Console.WriteLine("===== New Game =====");

        /* Customization Options
        / Character Info */
        this.Name = GetValidInput("----- Character Info -----\nEnter your character's name (8-28, no numbers, no special characters): ", @"^[a-zA-Z\s]{8,28}$");
        //Check if the name is already taken
        while(IsCharacterNameTaken(this.Name)){
            Console.WriteLine("Character name already taken. Please choose a different name.");
            this.Name = GetValidInput("Enter your character's name (8-28, no numbers, no special characters): ", @"^[a-zA-Z\s]{8,28}$");
        }
        this.Gender = GetValidInput("[1] Male\n[2] Female\n[3] Hideyoshi\nChoose your character's gender: ", new string[] { "Male", "Female", "Hideyoshi" });
        this.Age = GetValidInput("[1] Prodigy\n[2] Young Adult\n[3] Adult\n[4] Senior\n[5] Legendary\nChoose your character's age: ", new string[] { "Prodigy", "Young Adult", "Adult", "Senior", "Legendary" });

        //Physical Appearance
        this.BodyType = GetValidInput("\n----- Physical Appearance -----\n[1] Ectomorph\n[2] Endomorph\n[3] Mesomorph\n[4] Shrek\nChoose Body Type: ", new string[] { "Ectomorph", "Endomorph", "Mesomorph", "Shrek" });
        this.Height = GetValidInput("[1] Kapre (Extremely Tall)\n[2] Tall\n[3] Average\n[4] Short\n[5] Midget\nChoose Height: ", new string[] { "Kapre", "Tall", "Average", "Short", "Midget" });
        this.SkinColor = GetValidInput("[1] Black\n[2] Brown\n[3] Tan\n[4] Yellow\n[5] White\n[6] Blue\n[7] Green\nChoose Skin Color: ", new string[] { "Black", "Brown", "Tan", "Yellow", "White", "Blue", "Green" });
        this.HairType = GetValidInput("[1] Long\n[2] Medium\n[3] Short\n[4] Buzz\n[5] Bald\n[6] Balding\nChoose Hair Type: ", new string[] { "Long", "Medium", "Short", "Buzz", "Bald", "Balding" });
        this.HairColor = GetValidInput("[1] Black\n[2] Brunette\n[3] Blond\n[4] Gray\n[5] White\n[6] Red\n[7] Green\n[8] Blue\n[9] Purple\n[10] Yellow\n[11] Pink\n[12] Rainbow\nChoose Hair Color: ", new string[] { "Black", "Brunette", "Blond", "Gray", "White", "Red", "Green", "Blue", "Purple", "Yellow", "Pink", "Rainbow" });
        this.EyeColor = GetValidInput("[1] Amber\n[2] Black\n[3] Brown\n[4] Hazel\n[5] Blue\n[6] Green\n[7] Purple\nChoose Eye Color: ", new string[] { "Amber", "Black", "Brown", "Hazel", "Blue", "Green", "Purple" });

        //Apparel and Equipment
        this.Headgear = GetValidInput("\n----- Apparel and Equipment -----\n[1] Batting Helmet\n[2] Catcher Mask\n[3] Field Cap\n[4] Chicken Mascot Mask\n[5] Horse Mascot Mask\n[6] Fish-man Manager Mask\n[7] Cowboy Hat\n[8] Green Space Helmet\nChoose Headgear: ", new string[] { "Batting Helmet", "Catcher Mask", "Field Cap", "Chicken Mascot Mask", "Horse Mascot Mask", "Fish-man Manager Mask", "Cowboy Hat", "Green Space Helmet" });
        this.Top = GetValidInput("[1] Black Jersey\n[2] White Jersey\n[3] Striped Jersey\n[4] Chicken Mascot Top\n[5] Horse Mascot Top\n[6] Fish-man Manager Top\n[7] Yellow and Cowskin Cowboy Top\n[8] Green Space Suit\nChoose Top: ", new string[] { "Black Jersey", "White Jersey", "Striped Jersey", "Chicken Mascot Top", "Horse Mascot Top", "Fish-man Manager Top", "Yellow and Cowskin Cowboy Top", "Green Space Suit" });
        this.Pants = GetValidInput("[1] Black Pants\n[2] White Pants\n[3] Striped Pants\n[4] Chicken Mascot Pants\n[5] Horse Mascot Pants\n[6] Cowboy Pants\n[7] White Space Pants\nChoose Pants: ", new string[] { "Black Pants", "White Pants", "Striped Pants", "Chicken Mascot Pants", "Horse Mascot Pants", "Cowboy Pants", "White Space Pants" });
        this.Shoes = GetValidInput("[1] Baseball Shoes\n[2] Running Shoes\n[3] Bjorgan Sneakers\n[4] Sandals\n[5] Mascot Chicken Feet\n[6] Cowboy Boots\n[7] White Space Boots\nChoose Shoes: ", new string[] { "Baseball Shoes", "Running Shoes", "Bjorgan Sneakers", "Sandals", "Mascot Chicken Feet", "Cowboy Boots", "White Space Boots" });
        this.Accessories = GetValidInput("[1] Piercing\n[2] Rapper Chains\n[3] Sunglasses\n[4] Reading Glasses\n[5] Horns\n[6] Cowboy Badge\n[7] Sci-fi Hand Blaster\nChoose Accessories: ", new string[] { "Piercing", "Rapper Chains", "Sunglasses", "Reading Glasses", "Horns", "Cowboy Badge", "Sci-fi Hand Blaster" });
        this.FacePaint = GetValidInput("[1] Yes\n[2] No\nWear Face Paint?: ");
        this.Bat = GetValidInput("[1] Wood Bat\n[2] Metal Bat\n[3] Plastic Bat\n[4] Glow in the Dark Bat\nChoose Baseball Bat: ", new string[] { "Wood Bat", "Metal Bat", "Plastic Bat", "Glow in the Dark Bat" });
        this.Gloves = GetValidInput("[1] Normal Glove\n[2] Dad's Glove\n[3] Vintage Glove\n[4] Glow in the Dark Glove\nChoose Pitching Glove: ", new string[] { "Normal Glove", "Dad's Glove", "Vintage Glove", "Glow in the Dark Glove" });
        
        //Classes and Special Trait
        this.PhysicalClass = GetValidInput("\n----- Classes and Special Trait -----\n[1] Speedster: A High Speed but Low Power Class.\n[2] Slugger: A Low Speed but High Power Class.\n[3] Sisyphus: A High Stamina but Low Accuracy Class.\n[4] Precision Hitter: A High Accuracy but low Stamina Class.\n[5] All-Rounder: All stats balanced evenly, perfect for beginners.\nChoose Physical Class: ", 
                                            new string[] { "Speedster", "Slugger", "Sisyphus", "Precision Hitter", "All-Rounder" });
        this.MentalClass = GetValidInput("[1] Prodigy: Small increase to all stats.\n[2] Ace: Increases odds of success when losing.\n[3] Hot-Head: Increases Power after a miss.\n[4] Playmaker: Grants a 50% chance to clear Special Cooldown.\n[5] Deadeye: Grants a 10% chance for a guaranteed pitch/swing.\nChoose Mental Class: ", 
                                            new string[] { "Prodigy", "Ace", "Hot-Head", "Playmaker", "Deadeye" });
        this.SpecialTrait = GetValidInput("[1] Power Surge: Temporarily increase Power.\n[2] Speed Demon: Temporarily increase Speed.\n[3] Iron Will: Temporarily increase Stamina.\n[4] In the Zone: Temporarily increase Accuracy.\n[5] Stealth Runner: Stealthily steal an opponent's base. (+1 team point, basically)\n[6] Cry a Foul: Be a crybaby! 25% chance to skip the round.\n[7] Chaos: Mystery Special Ability.\nChoose Special Trait: ", 
                                            new string[] { "Power Surge", "Speed Demon", "Iron Will", "In the Zone", "Stealth Runner", "Cry a Foul", "Chaos" });
        
        //Team
        this.TeamName = GetValidInput("\n----- Team -----\nEnter your team name (4-18, numbers allowed, no special characters): ", @"^[a-zA-Z0-9\s]{4,18}$");
        this.JerseyNumber = GetValidInput("Enter your jersey number (1-99): ", 1, 99);

        //Calls function that saves character data to database
        SaveCharacterToDatabase();

        //New Character Showcase
        ShowcaseCharacterInfo();
    }

    public override void ShowcaseCharacterInfo(){
        base.ShowcaseCharacterInfo();
    }

    /*  Overloaded Methods  */
    //String Input
    private static string GetValidInput(string prompt, string restrictions){
        string input;
        while (true){
            Console.WriteLine(prompt);
            input = Console.ReadLine();

            //This code that's totally mine is absolutely BEAUTIFUL...
            if(Regex.IsMatch(input /* ...except for this, dafuq? */, restrictions) && !string.IsNullOrWhiteSpace(input)){
                return input;
            }
        }
    }

    //Multiple Choice
    private static string GetValidInput(string prompt, string[] options){
        string input;
        while (true){
            Console.Write(prompt);
            input = Console.ReadLine();

            if (int.TryParse(input, out int choice) && choice >= 1 && choice <= options.Length){
                return options[choice - 1];
            }

            Console.WriteLine("Invalid choice! Please try again.");
            Console.ReadKey();
        }
    }

    //Int Input
    public static int GetValidInput(string prompt, int min, int max){
        int input;
        while (true){
            try{
                Console.Write(prompt);
                input = int.Parse(Console.ReadLine());

                if (input >= min && input <= max){
                    return input;
                }

                Console.WriteLine($"Invalid input! Please enter a number between {min}-{max}.");
                Console.ReadKey();
            }
            catch (Exception E){
                Console.WriteLine($"Error from user stupidity: {E.Message}");
            }
        }
    }

    //Bool Input
    private static bool GetValidInput(string prompt){
        string input;
        while (true){
            Console.Write(prompt);
            input = Console.ReadLine();

            if (input == "1"){
                return true;
            }
            else if (input == "2"){
                return false;
            }

            Console.WriteLine("Invalid input! Please enter 1 (True) or 2 (False).");
        }
    }

    private bool IsCharacterNameTaken(string name)
    {
        string query = $@"
            SELECT COUNT(*) FROM `qwertyballsdb`.`character` 
            WHERE `name` = '{name}'";

        // Use Convert.ToInt32 to cast the object returned by ExecuteScalarQuery to int
        int result = Convert.ToInt32(DatabaseHelper.ExecuteScalarQuery(query));

        return result > 0;  // If count is greater than 0, the name is taken
    }
        
    //Yeets character data to database
    private void SaveCharacterToDatabase()
    {
        string query = @"
            INSERT INTO `qwertyballsdb`.`character` 
            (`name`, `gender`, `age`, `bodyType`, `height`, `skin`, `hairType`, 
             `hairColor`, `eyeColor`, `headgear`, `top`, `pants`, `shoes`, `accessories`, 
             `face`, `bat`, `gloves`, `phyClass`, `menClass`, `special`, `teamName`, 
             `teamNumber`) 
            VALUES 
            ('{0}', '{1}', '{2}', '{3}', '{4}', '{5}', '{6}', 
             '{7}', '{8}', '{9}', '{10}', '{11}', '{12}', '{13}', 
             {14}, '{15}', '{16}', '{17}', '{18}', '{19}', '{20}', {21})";

        // Use string formatting for values
        query = string.Format(query,
            DatabaseHelper.EscapeApostrophes(Name), 
            Gender, 
            Age, 
            BodyType, 
            Height, 
            SkinColor, 
            HairType,
            HairColor, 
            EyeColor, 
            Headgear, 
            Top, 
            Pants, 
            Shoes, 
            Accessories,
            FacePaint ? 1 : 0, 
            Bat, 
            Gloves, 
            PhysicalClass, 
            MentalClass, 
            SpecialTrait, 
            TeamName, 
            JerseyNumber
        );

        // Execute the query
        int result = DatabaseHelper.ExecuteQuery(query);
        Console.WriteLine(result > 0 ? "Character saved successfully!" : "Failed to save character.");
    }
}

public class LoadGame{
    public void ShowLoadGameMenu(){
        Console.Clear();
        Console.WriteLine("===== Load Game =====");
        Console.WriteLine("[1] Show All Characters");
        Console.WriteLine("[2] View Saved Characters");
        Console.WriteLine("[3] Back to Main Menu");

        int choice = CharacterCreation.GetValidInput("Choose an option: ", 1, 3);

        if(choice == 1){
            ShowAllCharacters();
        }
        else if (choice == 2){
            ViewSavedCharacters();
        }
        else{
            return;
        }
    }

    //Stolen from Kanlaon, the local deity, the Ruler of Time itself!... no big deal
    private void ShowAllCharacters()
    {
        Console.Clear();
        Console.WriteLine("===== All Characters =====");

        List<(int id, string name)> characters = GetAllCharacters();
        if (characters.Count == 0)
        {
            Console.WriteLine("No characters found.");
            return;
        }

        foreach (var character in characters)
        {
            // Fetch detailed information for each character
            string query = $"SELECT * FROM qwertyballsdb.character WHERE id={character.id};";
            using (var reader = DatabaseHelper.ExecuteReader(query))
            {
                if (reader.Read())
                {
                    Console.WriteLine($"Name: {reader["name"]}");
                    Console.WriteLine($"Gender: {reader["gender"]}");
                    Console.WriteLine($"Age: {reader["age"]}");
                    Console.WriteLine($"Body Type: {reader["bodyType"]}");
                    Console.WriteLine($"Height: {reader["height"]}");
                    Console.WriteLine($"Skin Color: {reader["skin"]}");
                    Console.WriteLine($"Hair Type: {reader["hairType"]}");
                    Console.WriteLine($"Hair Color: {reader["hairColor"]}");
                    Console.WriteLine($"Eye Color: {reader["eyeColor"]}");
                    Console.WriteLine($"Headgear: {reader["headgear"]}");
                    Console.WriteLine($"Top: {reader["top"]}");
                    Console.WriteLine($"Pants: {reader["pants"]}");
                    Console.WriteLine($"Shoes: {reader["shoes"]}");
                    Console.WriteLine($"Accessories: {reader["accessories"]}");
                    Console.WriteLine($"Face Paint: {reader["face"]}");
                    Console.WriteLine($"Bat: {reader["bat"]}");
                    Console.WriteLine($"Gloves: {reader["gloves"]}");
                    Console.WriteLine($"Physical Class: {reader["phyClass"]}");
                    Console.WriteLine($"Mental Class: {reader["menClass"]}");
                    Console.WriteLine($"Special Trait: {reader["special"]}");
                    Console.WriteLine($"Team Name: {reader["teamName"]}");
                    Console.WriteLine($"Jersey Number: {reader["teamNumber"]}");
                    Console.WriteLine("----------------------------");
                }
            }
        }

        Console.WriteLine("\nPress any key to return to the Load Game Menu...");
        Console.ReadKey();
        ShowLoadGameMenu();
    }

    private void ViewSavedCharacters()
    {
        Console.Clear();
        Console.WriteLine("===== Saved Characters =====");

        List<(int id, string name)> characters = GetAllCharacters();
        if (characters.Count == 0)
        {
            Console.WriteLine("No saved characters found.");
            return;
        }

        Console.WriteLine("Select a character:");

        for (int i = 0; i < characters.Count; i++)
        {
            Console.WriteLine($"[{i + 1}] {characters[i].name}");
        }
        Console.WriteLine($"[{characters.Count + 1}] Back to Main Menu");

        int choice = CharacterCreation.GetValidInput($"Choose a number (1-{characters.Count + 1}): ", 1, characters.Count + 1);
        if (choice == characters.Count + 1) return;

        var selectedCharacter = characters[choice - 1];
        Console.WriteLine($"\nSelected: {selectedCharacter.name}");
        Console.WriteLine("[1] View Character Details");
        Console.WriteLine("[2] Delete Character");
        Console.WriteLine("[3] Back to Load Game Menu");

        int action = CharacterCreation.GetValidInput("Choose an option: ", 1, 3);
        if (action == 1)
        {
            DisplayCharacterDetails(selectedCharacter.id);
        }
        else if (action == 2)
        {
            //Console.Clear();
            Console.WriteLine("Are you sure you want to delete this character?\n[1] Yes\n[2] No");
            int deleteConfirmation = CharacterCreation.GetValidInput("Choose an option: ", 1, 2);
            if (deleteConfirmation == 1){
                DeleteCharacter(selectedCharacter.id);
            }
            else if(deleteConfirmation == 2){
                Console.WriteLine("\nCharacter was NOT deleted.");
            }
        }
        else
        {
            ShowLoadGameMenu();
        }
    }

    private List<(int id, string name)> GetAllCharacters()
    {
        string query = "SELECT id, name FROM qwertyballsdb.character;";
        var characters = new List<(int id, string name)>();

        using (var reader = DatabaseHelper.ExecuteReader(query))
        {
            while (reader.Read())
            {
                int id = reader.GetInt32("id");
                string name = reader.GetString("name");
                characters.Add((id, name));
            }
        }

        return characters;
    }

    private void DisplayCharacterDetails(int characterId)
    {
        string query = $"SELECT * FROM qwertyballsdb.character WHERE id={characterId};";
        using (var reader = DatabaseHelper.ExecuteReader(query))
        {
            if (reader.Read())
            {
                Console.Clear();
                Console.WriteLine("===== Character Details =====");
                Console.WriteLine($"Name: {reader["name"]}");
                Console.WriteLine($"Gender: {reader["gender"]}");
                Console.WriteLine($"Age: {reader["age"]}");
                Console.WriteLine($"Body Type: {reader["bodyType"]}");
                Console.WriteLine($"Height: {reader["height"]}");
                Console.WriteLine($"Skin Color: {reader["skin"]}");
                Console.WriteLine($"Hair Type: {reader["hairType"]}");
                Console.WriteLine($"Hair Color: {reader["hairColor"]}");
                Console.WriteLine($"Eye Color: {reader["eyeColor"]}");
                Console.WriteLine($"Headgear: {reader["headgear"]}");
                Console.WriteLine($"Top: {reader["top"]}");
                Console.WriteLine($"Pants: {reader["pants"]}");
                Console.WriteLine($"Shoes: {reader["shoes"]}");
                Console.WriteLine($"Accessories: {reader["accessories"]}");
                Console.WriteLine($"Face Paint: {reader["face"]}");
                Console.WriteLine($"Bat: {reader["bat"]}");
                Console.WriteLine($"Gloves: {reader["gloves"]}");
                Console.WriteLine($"Physical Class: {reader["phyClass"]}");
                Console.WriteLine($"Mental Class: {reader["menClass"]}");
                Console.WriteLine($"Special Trait: {reader["special"]}");
                Console.WriteLine($"Team Name: {reader["teamName"]}");
                Console.WriteLine($"Jersey Number: {reader["teamNumber"]}");
                Console.WriteLine("\nPress any key to return to the Load Game Menu...");
                Console.ReadKey();
            }
        }
        ShowLoadGameMenu();
    }

    private void DeleteCharacter(int characterId)
    {
        string query = $"DELETE FROM qwertyballsdb.character WHERE id={characterId};";
        int result = DatabaseHelper.ExecuteQuery(query);
        Console.WriteLine(result > 0 ? "\nCharacter deleted successfully!" : "\nFailed to delete character.");
    }
}

struct CampaignMode{
    // [TEMPORARY SOLUTION UNTIL DATABASE USE IS FIGURED OUT]
    public void StorySummary(){
        Console.Clear();
        Console.WriteLine("===== Campaign Story Summary =====\n");

        Console.WriteLine(
        $"In a small barangay located somewhere in the Philippines, baseball was more than just some foreign sport—it was the passion of the community. " +
        $"Every\nyear, the barangay rallied behind their pride and joy, the \"STI Bawlers\", an amateur team fighting to reach the pro leagues of MLG. " +
        $"You, a promising\nbaseball player, had grown up idolizing the MLG Players such as Steven Curry and Alex Jorgan. " +
        $"Your gay father, a former pro player, had taught you\nthe importance of heart over talent, something you carried with you as you stepped into the batter's box from your first game, all the way to now. " +
        $"\nBut after your gay father and his fellow gay, bi, trans, attack helicopter and etc-gendered players retired, their team, \"Jared's Angels\" lost it's\nspark and on the brink of collapse, with dwindling funds and with only one way to save the team: Merging with a younger, passion-driven team—one\nsuch as your own. " +
        $"\nAs time progressed, it became clear that near-collpase Jared's Angels were not just the result of loss of talent but also because it's current members\nwere not just fighting other teams but also their own demons. " +
        $"The star pitcher, Ungoy D. Yuffie, was battling his constantly changing sexual preferences—\nindecisive of whether it wanted to be a transformer or a frying pan, while the team's veteran manager, Coach Navales, seemed haunted by ghosts of past\nfailures—most importantly, his failure to get his K-Pop Idol's autograph. " +
        $"Despite this though, after the merging of both teams, you emerged as the\nleader, uniting the team with a mix of grit, charisma and marijuana—leading them to the City Championship. " +
        $"Each game was a test of skill and determination,\nwith rivals like MLG pro league team of Navotas called \'Berifco Votas-Votas\' pushing you and your team to the limit. " +
        $"Off the field, your home-barangay\nwas fully believing with both a sense of pride and exhiliration, filling the stadium with cheers that echoed like they had decades ago for Jared's Angels.\n" +
        $"But beneath the surface, the pressure mounted as rumors swirled that the championship game would determine whether their barangay would once again taste\nglory and hold the cup of victory." +
        $"\nOn the even of the championship, a storm rolled in, mirroring the tension in the locker room. " +
        $"The final game was against Valenzuela's \"Digmaang Thunder\nBoys\", an undefeated pro team said to be guided by their local god, Kanlaon—they notorious for crushing opponents, sweeping across the regionals and\nnationals when they started a couple years ago. " +
        $"As the game unfolded, it became a nail-biting contest of strategy, perserverance, and douchbaggery. " +
        $"\nIn the ninth inning, with two outs and bases loaded, the spotlight fell on you. " +
        $"Every lesson your gay father taught you and every sacrifice your teammates made\nbrought you to this moment. " +
        $"With the weight of your barangay resting upon your shoulders, using special move that you developed through the years, you\nswung your bat for a legacy. " +
        $"The crack of the bat echoed like thunder, and as the ball soared, so too did the hopes of everyone that believed in you."
        );
    }

    /* [CANCELLED DUE TO DEADLINE]
        TODO:
        -Prologue
        -Episode 1-3
        -Epilogue
    */

    public void StartCampaign(int chapter){
        Console.Clear();
        Console.WriteLine($"===== Campaign Mode (Starting at Chapter {chapter}) =====");

        switch(chapter){
            case 1:
                PlayPrologue();
                break;
            case 2:
                PlayEpisode1();
                break;
            /*case 3:
                PlayEpisode2();
                break;
            case 4:
                PlayEpisode3();
                break;
            case 5:
                PlayEpilogue();
                break;*/
            default:
                Console.WriteLine("Chapter not implemented yet.");
                break;
        }
    }

    private void PlayPrologue(){
        Console.Clear();
        Console.WriteLine("===== Chapter: Prologue =====");

        string[] Prologue = {
            "In a small barangay somewhere in the Philippines, there was a place where dreams were as big as the sky and, unfortunately, as fragile as the bamboo stands that lined the outskirts of town.\n",
            "Baseball, that strange foreign game with a bat and a ball, had somehow wormed its way into the heart of the community.\n",
            "It wasn't the national sport, not by a long shot, but here it was more important than a mayoral election or even a town fiesta.\n",
            "Why? ",
            "Because the STI Ballers were more than a team—they were the very pulse of the barangay.",
            "\nYou grew up in the shadow of these legends. ",
            "",
        };

        PlayText(Prologue);

        PlayEpisode1();
    }

    private void PlayEpisode1(){
        Console.Clear();

        /*
            Episode 1
        */
    }

    private void PlayText(string[] SiMhartSupot){
        try{
            //Threads to play text letter by letter, technically works*
            for(int i = 0; i <= SiMhartSupot.Length; i++){
                foreach(char c in SiMhartSupot[i]){
                    Thread.Sleep(30);
                    Console.Write(c);
                }
                Console.ReadKey();
            }
        }
        catch(IndexOutOfRangeException E){}
    }
}